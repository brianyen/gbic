[
    {
        "ts": "0-05-00",
        "png": "clip-001/slide-0-05-00.png",
        "text": [
            {
                "ts": "0-05-03",
                "text": "so that's the runtime analysis for"
            },
            {
                "ts": "0-05-05",
                "text": "counting sort so the bottom line is that"
            },
            {
                "ts": "0-05-08",
                "text": "if n is bigger than or equal to R then"
            },
            {
                "ts": "0-05-11",
                "text": "we expect reasonable performance but if"
            },
            {
                "ts": "0-05-14",
                "text": "art is really really really big like the"
            },
            {
                "ts": "0-05-16",
                "text": "example of sorting world cities then it"
            },
            {
                "ts": "0-05-18",
                "text": "won't be so good so just to note in"
            },
            {
                "ts": "0-05-20",
                "text": "terms of memory usage this n is for the"
            },
            {
                "ts": "0-05-23",
                "text": "ordered array that we build and R as for"
            },
            {
                "ts": "0-05-25",
                "text": "the counts and the starting points and"
            },
            {
                "ts": "0-05-27",
                "text": "if you wanted to know which one's"
            },
            {
                "ts": "0-05-29",
                "text": "actually better then we need to do some"
            },
            {
                "ts": "0-05-31",
                "text": "kind of experiments say vs. quicksort to"
            },
            {
                "ts": "0-05-34",
                "text": "see which is better and we won't do it"
            },
            {
                "ts": "0-05-37",
                "text": "in this lecture but in the next lecture"
            },
            {
                "ts": "0-05-38",
                "text": "we will actually do a deeper comparison"
            },
            {
                "ts": "0-05-40",
                "text": "of so-called counting sorts and a couple"
            },
            {
                "ts": "0-05-43",
                "text": "related sorts we'll talk about later"
            },
            {
                "ts": "0-05-44",
                "text": "today and our earlier comparison based"
            },
            {
                "ts": "0-05-47",
                "text": "sorts so that's counting sorts run time"
            },
            {
                "ts": "0-05-50",
                "text": "in a few words and hopefully this makes"
            },
            {
                "ts": "0-05-52",
                "text": "sense I think this is a pretty"
            },
            {
                "ts": "0-05-53",
                "text": "straightforward runtime analysis there's"
            },
            {
                "ts": "0-05-55",
                "text": "a lot of little pieces to keep track of"
            },
            {
                "ts": "0-05-57",
                "text": "but there's nothing tricky here like"
            },
            {
                "ts": "0-05-58",
                "text": "there was with say merge sort or"
            },
            {
                "ts": "0-06-00",
                "text": "quicksort runtime analysis to see if"
            },
            {
                "ts": "0-06-03",
                "text": "this runtime analysis makes sense I'm"
            },
            {
                "ts": "0-06-05",
                "text": "going to ask you a question in which may"
            }
        ]
    },
    {
        "ts": "0-06-04",
        "png": "clip-001/slide-0-06-04.png",
        "text": [
            {
                "ts": "0-06-06",
                "text": "or may not be a trick question so let's"
            },
            {
                "ts": "0-06-09",
                "text": "say we'd like to sort really really"
            },
            {
                "ts": "0-06-11",
                "text": "really big collections of items from"
            },
            {
                "ts": "0-06-13",
                "text": "some alphabet say card suits or integers"
            },
            {
                "ts": "0-06-15",
                "text": "or whatever which algorithm is going to"
            },
            {
                "ts": "0-06-17",
                "text": "be the fastest counting sort or"
            },
            {
                "ts": "0-06-19",
                "text": "quicksort"
            },
            {
                "ts": "0-06-25",
                "text": "okay it's just counting sort so counting"
            },
            {
                "ts": "0-06-28",
                "text": "sorts runtime as n plus R and quicksort"
            }
        ]
    },
    {
        "ts": "0-06-25",
        "png": "clip-001/slide-0-06-25.png",
        "text": [
            {
                "ts": "0-06-31",
                "text": "is in log in and for sufficiently large"
            },
            {
                "ts": "0-06-34",
                "text": "collections if we just eventually have a"
            },
            {
                "ts": "0-06-36",
                "text": "big enough in counting sort will simply"
            },
            {
                "ts": "0-06-38",
                "text": "be faster even sorting integers"
            },
            {
                "ts": "0-06-40",
                "text": "even though R is a really big number if"
            },
            {
                "ts": "0-06-42",
                "text": "n is much much bigger than the set of"
            },
            {
                "ts": "0-06-44",
                "text": "integers"
            },
            {
                "ts": "0-06-44",
                "text": "well then counting sort is going to be"
            },
            {
                "ts": "0-06-46",
                "text": "the winning choice all right so to"
            },
            {
                "ts": "0-06-50",
                "text": "summarize all of our sorts we have our"
            }
        ]
    },
    {
        "ts": "0-06-50",
        "png": "clip-001/slide-0-06-50.png",
        "text": [
            {
                "ts": "0-06-53",
                "text": "heap sort insertion sort merge sort and"
            },
            {
                "ts": "0-06-55",
                "text": "randomized quicksort here so these are"
            },
            {
                "ts": "0-06-58",
                "text": "all different versions of the sorts we"
            },
            {
                "ts": "0-07-00",
                "text": "saw before and now we have a new tool"
            },
            {
                "ts": "0-07-02",
                "text": "called counting sort which takes in plus"
            },
            {
                "ts": "0-07-04",
                "text": "R memory and n plus our runtime but it"
            },
            {
                "ts": "0-07-07",
                "text": "only works if our keys come from some"
            },
            {
                "ts": "0-07-09",
                "text": "kind of an alphabet so it turns out that"
            },
            {
                "ts": "0-07-12",
                "text": "there are some things that don't really"
            },
            {
                "ts": "0-07-14",
                "text": "match the definition of an alphabet"
            },
            {
                "ts": "0-07-16",
                "text": "consider for example all strings so"
            },
            {
                "ts": "0-07-20",
                "text": "strings there's an uncountably large"
            },
            {
                "ts": "0-07-22",
                "text": "sorry there's a countably infinite"
            },
            {
                "ts": "0-07-24",
                "text": "number of strings out there and as a"
            },
            {
                "ts": "0-07-26",
                "text": "result that means that we cannot like"
            },
            {
                "ts": "0-07-32",
                "text": "it's you can't just say they're all from"
            },
            {
                "ts": "0-07-34",
                "text": "some alphabet it wouldn't make sense"
            },
            {
                "ts": "0-07-36",
                "text": "because there's an infinite number and"
            },
            {
                "ts": "0-07-38",
                "text": "so that's that means that what we have"
            },
            {
                "ts": "0-07-40",
                "text": "so far counting sort school but we"
            },
            {
                "ts": "0-07-42",
                "text": "couldn't really use it without being a"
            },
            {
                "ts": "0-07-45",
                "text": "little bit hackish and how we implement"
            },
            {
                "ts": "0-07-46",
                "text": "it we couldn't really implement it with"
            },
            {
                "ts": "0-07-48",
                "text": "strings and so what we're gonna see in"
            },
            {
                "ts": "0-07-50",
                "text": "the coming videos is how we can"
            },
            {
                "ts": "0-07-52",
                "text": "generalize counting sort to go even"
            },
            {
                "ts": "0-07-53",
                "text": "beyond alphabet keys and that will give"
            },
            {
                "ts": "0-07-56",
                "text": "us what will be known as a radix sort"
            }
        ]
    }
]